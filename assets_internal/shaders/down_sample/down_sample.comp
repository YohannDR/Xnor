#version 430 core

// This shader performs downsampling on a texture,
// as taken from Call Of Duty method, presented at ACM Siggraph 2014.
// This particular method was customly designed to eliminate
// "pulsating artifacts and temporal stability issues".

// Remember to add bilinear minification filter for this texture!
// Remember to use a floating-point texture format (for HDR)!
// Remember to use edge clamping for this texture!

#define GroupSize         8
#define GroupThreadCount (GroupSize * GroupSize)
#define FilterSize        3
#define FilterRadius      (FilterSize / 2)
#define TileSize          (GroupSize + 2 * FilterRadius)
#define TilePixelCount   (TileSize * TileSize)

layout (local_size_x = GroupSize, local_size_y = GroupSize) in;
layout(rgba32f, binding = 1) uniform image2D nextMip;

uniform vec2  uTexelSize;
uniform sampler2D currentMip;


shared float sm_r[TilePixelCount];
shared float sm_g[TilePixelCount];
shared float sm_b[TilePixelCount];

vec3 PowVec3(vec3 v, float p)
{
	return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}

const float invGamma = 1.0 / 2.2;
vec3 ToSRGB(vec3 v)   { return PowVec3(v, invGamma); }

float sRGBToLuma(vec3 col)
{
	//return dot(col, vec3(0.2126f, 0.7152f, 0.0722f));
	return dot(col, vec3(0.299f, 0.587f, 0.114f));
}

float KarisAverage(vec3 col)
{
	// Formula is 1 / (1 + luma)
	float luma = sRGBToLuma(ToSRGB(col)) * 0.25f;
	return 1.0f / (1.0f + luma);
}


void StoreLds(int idx, vec4 c)
{
	sm_r[idx] = c.r;
	sm_g[idx] = c.g;
	sm_b[idx] = c.b;
}

vec4 load_lds(int idx)
{
	return vec4(sm_r[idx], sm_g[idx], sm_b[idx], 1.0);
}

// NOTE: This is the readable version of this shader. It will be optimized!
void main()
{

	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	vec2  base_index   = ivec2(gl_WorkGroupID) * GroupSize - FilterRadius;
	
	// The first (TilePixelCount - GroupThreadCount) threads load at most 2 texel values
	for (int i = int(gl_LocalInvocationIndex); i < TilePixelCount; i += GroupThreadCount)
	{
		vec2 uv        = (base_index + 0.5) * uTexelSize;
		vec2 uv_offset = vec2(i % TileSize, i / TileSize) * uTexelSize;

		vec4 color = texture(currentMip, (uv + uv_offset));
		StoreLds(i, color);
	}

	memoryBarrierShared();
	barrier();

	int sm_idx = int((gl_LocalInvocationID.x + FilterRadius) + (gl_LocalInvocationID.y + FilterRadius) * TileSize);

	// Take 13 samples around current texel:
	// a - b - c
	// - j - k -
	// d - e - f
	// - l - m -
	// g - h - i
	
	vec3 a = load_lds(sm_idx - TileSize - 1).rgb;
	vec3 b = load_lds(sm_idx - TileSize    ).rgb;
	vec3 c = load_lds(sm_idx - TileSize + 1).rgb;
	vec3 f = load_lds(sm_idx - 1            ).rgb;
	vec3 g = load_lds(sm_idx                ).rgb;
	vec3 h = load_lds(sm_idx + 1            ).rgb;
	vec3 k = load_lds(sm_idx + TileSize - 1).rgb;
	vec3 l = load_lds(sm_idx + TileSize    ).rgb;
	vec3 m = load_lds(sm_idx + TileSize + 1).rgb;

	vec3 d = (a + b + f + f) * 0.25;
	vec3 e = (b + c + h + g) * 0.25;
	vec3 i = (f + g + l + k) * 0.25;
	vec3 j = (g + h + m + l) * 0.25;

	vec3 groups[5];
	groups[0] = (a+b+d+e) * (0.125f/4.0f);
	groups[1] = (b+c+e+f) * (0.125f/4.0f);
	groups[2] = (d+e+g+h) * (0.125f/4.0f);
	groups[3] = (e+f+h+i) * (0.125f/4.0f);
	groups[4] = (j+k+l+m) * (0.5f/4.0f);
	groups[0] *= KarisAverage(groups[0]);
	groups[1] *= KarisAverage(groups[1]);
	groups[2] *= KarisAverage(groups[2]);
	groups[3] *= KarisAverage(groups[3]);
	groups[4] *= KarisAverage(groups[4]);
	
	vec3 color = groups[0]+groups[1]+groups[2]+groups[3]+groups[4];
	color = max(color, 0.0001f);
	
	imageStore(nextMip, pixelCoords, vec4(color.x, color.y, color.z, 1.0f));
}
